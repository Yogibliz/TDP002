#UPG 5a

#Take a lamda function and list of numbers. Then uses reduce to use the lambda function on all the numbers in the list (one by one).
#Example: calcuate(add, 1, 512) makes a list of the numbers 0-512. Then does 0+1 = 1 then 1 + 2 = 3 then 3 + 3 = 6 then 6 + 4. 
#Basically result of the first addition + the next number in the list until it reaches result + 512.
def calculate(lambda_func, start_num, end_num):
    # Create a list of all the numbers + 1 since range excludes the last number
    numbers = list(range(start_num, end_num + 1))
    
    #Uses the first number as initiator for the for loop.
    result = numbers[0]

    #Adds together everything from index 1 forward.
    for num in numbers[1:]:
        result = lambda_func(result, num)
    
    return result

add = lambda x, y: x + y

multi = lambda x, y: x * y

result_add = calculate(add, 0, 512)

result_multi = calculate(multi, 1, 512)

print(result_add, "\n") #Returns 131328
print(result_multi) #Returns 3477289793132605363283045917545604711992250655643514
# 57034247483155161041206635254347320985033950225364432243311021394545295001702070
# 06901326415311326093794135871186404471618686104089955749736142758828235625496842
# 50124803968552397251205625120655558221217087864436207992465509591872320268380814
# 15178588172535280020786313470076859739980965720873849904291373826841584712798618
# 43038733804232977180172476769109501954575898694273251503355152959500987699927955
# 39310703785929170990023970619071471434241132521175859508178508966184339941402328
# 23316432187410356341262386332496954319973130407342567282027398579382543048456876
# 80086234992814041190543127619743567460328184253074417752736588572162951225387238
# 66131188215408478974931073983819560817636952364227958802962043017708088094771476
# 32428639299038833046264585834888158847387737841843413664892833586209196366979775
# 74889582182692404005784514028752223867508213757031595452672743709490491479678264
# 10007407778979191340933935304227609551402113871736500473583473533792343876092613
# 06673773281412893026941927424000000000000000000000000000000000000000000000000000
# 000000000000000000000000000000000000000000000000000000000000000000000000000